// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using personalised_concierge_m1.Data;
using personalised_concierge_m1.Models.Entities.FoodLeisureServices;
using personalised_concierge_m1.Models.Entities.OtherServices;

namespace personalised_concierge_m1.Migrations
{
    [DbContext(typeof(ConciergeContext))]
    partial class ConciergeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasPostgresEnum(null, "cuisine_type", new[] { "malay", "chinese", "indian", "western" })
                .HasPostgresEnum(null, "food_leisure_type", new[] { "restaurant", "hawker", "poi", "hotel_facilities" })
                .HasPostgresEnum(null, "navigation_type", new[] { "walk", "drive", "car", "taxi", "train", "bus" })
                .HasPostgresEnum(null, "rating", new[] { "one", "two", "three", "four", "five" })
                .HasPostgresEnum(null, "taxi_type", new[] { "standard", "limo", "chrylsler" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Facilities.Facility", b =>
                {
                    b.Property<int>("facility_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("hotel_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("operation_end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("operation_start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("facility_id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            facility_id = 1,
                            hotel_id = 1,
                            name = "Basketball Court",
                            operation_end_time = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(1520),
                            operation_start_time = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(500),
                            status = "Available"
                        },
                        new
                        {
                            facility_id = 2,
                            hotel_id = 2,
                            name = "Tennis Court",
                            operation_end_time = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(2990),
                            operation_start_time = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(2890),
                            status = "Available"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Facilities.FacilityBooking", b =>
                {
                    b.Property<int>("facilitybooking_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("booking_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("booking_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("facility_id")
                        .HasColumnType("integer");

                    b.HasKey("facilitybooking_id");

                    b.HasIndex("account_id");

                    b.HasIndex("facility_id");

                    b.ToTable("FacilityBookings");

                    b.HasData(
                        new
                        {
                            facilitybooking_id = 1,
                            account_id = 1,
                            booking_end = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(7600),
                            booking_start = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(6830),
                            facility_id = 1
                        },
                        new
                        {
                            facilitybooking_id = 2,
                            account_id = 2,
                            booking_end = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(9090),
                            booking_start = new DateTime(2022, 2, 14, 11, 32, 49, 36, DateTimeKind.Local).AddTicks(9020),
                            facility_id = 2
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Facilities.Feedback", b =>
                {
                    b.Property<int>("feedback_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("feedback_id");

                    b.HasIndex("account_id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            feedback_id = 1,
                            account_id = 1,
                            created_at = new DateTime(2022, 2, 14, 11, 32, 49, 37, DateTimeKind.Local).AddTicks(3690),
                            description = "Perfect dream hotel after a hard project",
                            type = "General"
                        },
                        new
                        {
                            feedback_id = 2,
                            account_id = 2,
                            created_at = new DateTime(2022, 2, 14, 11, 32, 49, 37, DateTimeKind.Local).AddTicks(5060),
                            description = "Perfect dream hotel after a hard project",
                            type = "General"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.FoodLeisureServices.Attraction", b =>
                {
                    b.Property<int>("foodleisure_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("attraction_hours")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<double>("attraction_lat")
                        .HasColumnType("double precision");

                    b.Property<double>("attraction_lon")
                        .HasColumnType("double precision");

                    b.Property<double>("attraction_price")
                        .HasColumnType("double precision");

                    b.HasKey("foodleisure_id");

                    b.ToTable("Attractions");

                    b.HasData(
                        new
                        {
                            foodleisure_id = 1,
                            attraction_hours = "9:30am-6:30pm",
                            attraction_lat = 22.312999999999999,
                            attraction_lon = 114.04130000000001,
                            attraction_price = 100.0
                        },
                        new
                        {
                            foodleisure_id = 2,
                            attraction_hours = "12pm-6:30pm",
                            attraction_lat = 23.545400000000001,
                            attraction_lon = 115.0222,
                            attraction_price = 80.0
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.FoodLeisureServices.Food", b =>
                {
                    b.Property<int>("foodleisure_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<CuisineType>("cuisine")
                        .HasColumnType("cuisine_type");

                    b.HasKey("foodleisure_id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            foodleisure_id = 1,
                            cuisine = CuisineType.Western
                        },
                        new
                        {
                            foodleisure_id = 2,
                            cuisine = CuisineType.Chinese
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.FoodLeisureServices.FoodLeisure", b =>
                {
                    b.Property<int>("foodleisure_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("contact_num")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<FoodLeisureType>("type")
                        .HasColumnType("food_leisure_type");

                    b.Property<string>("website_link")
                        .HasColumnType("varchar(500)");

                    b.HasKey("foodleisure_id");

                    b.ToTable("FoodLeisures");

                    b.HasData(
                        new
                        {
                            foodleisure_id = 1,
                            address = "Lantau Island, Hong Kong",
                            category = "Theme Park",
                            contact_num = "+852 3550 3388",
                            description = "The happiest place on earth!",
                            name = "Hong Kong Disneyland",
                            type = FoodLeisureType.POI,
                            website_link = "https://www.hongkongdisneyland.com/"
                        },
                        new
                        {
                            foodleisure_id = 2,
                            address = "Jurong East",
                            category = "Theme Park",
                            contact_num = "89773448",
                            description = "seasfood restaurant",
                            name = "Tunglok",
                            type = FoodLeisureType.Restaurant,
                            website_link = "tunglok.com"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.HotelServices.HotelService", b =>
                {
                    b.Property<int>("service_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<bool>("availability")
                        .HasColumnType("boolean");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("service_id");

                    b.HasIndex("account_id");

                    b.ToTable("HotelServices");

                    b.HasData(
                        new
                        {
                            service_id = 1,
                            account_id = 1,
                            availability = true,
                            description = "Dry Cleaning"
                        },
                        new
                        {
                            service_id = 2,
                            account_id = 2,
                            availability = true,
                            description = "Room Cleaning"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Inventories.Inventory", b =>
                {
                    b.Property<int>("inventory_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("inv_name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("invcate_id")
                        .HasColumnType("integer");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("inventory_id");

                    b.HasIndex("invcate_id");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            inventory_id = 1,
                            inv_name = "FirstInventory",
                            invcate_id = 1,
                            quantity = 100,
                            status = "available"
                        },
                        new
                        {
                            inventory_id = 2,
                            inv_name = "SecondInventory",
                            invcate_id = 2,
                            quantity = 200,
                            status = "available"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Inventories.InventoryCategory", b =>
                {
                    b.Property<int>("invcate_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("cate_name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("invcate_id");

                    b.ToTable("InventoryCategories");

                    b.HasData(
                        new
                        {
                            invcate_id = 1,
                            cate_name = "Red Wine"
                        },
                        new
                        {
                            invcate_id = 2,
                            cate_name = "Bathroom Items"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Inventories.InventoryRequest", b =>
                {
                    b.Property<int>("invreq_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("inventory_id")
                        .HasColumnType("integer");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<string>("remarks")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("invreq_id");

                    b.HasIndex("inventory_id");

                    b.ToTable("InventoryRequests");

                    b.HasData(
                        new
                        {
                            invreq_id = 1,
                            created_date = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            inventory_id = 1,
                            price = 100,
                            quantity = 50,
                            remarks = "Inventory Request 01",
                            status_id = 1,
                            updated_date = new DateTime(2022, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            invreq_id = 2,
                            created_date = new DateTime(2022, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            inventory_id = 2,
                            price = 200,
                            quantity = 100,
                            remarks = "Inventory Request 02",
                            status_id = 2,
                            updated_date = new DateTime(2022, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Blog", b =>
                {
                    b.Property<int>("blog_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("foodleisure_id")
                        .HasColumnType("integer");

                    b.Property<int>("itinerary_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("blog_id");

                    b.HasIndex("account_id");

                    b.HasIndex("foodleisure_id");

                    b.HasIndex("itinerary_id");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            blog_id = 1,
                            account_id = 1,
                            created_date = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Spending my vaccation in Singapore during summer break!",
                            foodleisure_id = 1,
                            itinerary_id = 1,
                            name = "My Time in Singapore"
                        },
                        new
                        {
                            blog_id = 2,
                            account_id = 2,
                            created_date = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Staying at MBS was such a fun time!",
                            foodleisure_id = 2,
                            itinerary_id = 2,
                            name = "My Time at MBS"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Budget", b =>
                {
                    b.Property<int>("budget_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("budget_estimate")
                        .HasColumnType("double precision");

                    b.Property<int>("itinerary_id")
                        .HasColumnType("integer");

                    b.HasKey("budget_id");

                    b.HasIndex("itinerary_id");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            budget_id = 1,
                            budget_estimate = 120.5,
                            itinerary_id = 1
                        },
                        new
                        {
                            budget_id = 2,
                            budget_estimate = 231.30000000000001,
                            itinerary_id = 2
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Checklist", b =>
                {
                    b.Property<int>("checklist_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("itinerary_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("checklist_id");

                    b.HasIndex("itinerary_id");

                    b.ToTable("Checklists");

                    b.HasData(
                        new
                        {
                            checklist_id = 1,
                            created_date = new DateTime(2022, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "10 Fun things to do in SG when you are on a budget",
                            itinerary_id = 1,
                            name = "Things to Do in Singapore"
                        },
                        new
                        {
                            checklist_id = 2,
                            created_date = new DateTime(2022, 2, 14, 11, 32, 49, 16, DateTimeKind.Local).AddTicks(1730),
                            description = "Alex dream holiday",
                            itinerary_id = 2,
                            name = "Alex Checklist"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Expenses", b =>
                {
                    b.Property<int>("expenses_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("budget_id")
                        .HasColumnType("integer");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<double>("cost")
                        .HasColumnType("double precision");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("expenses_id");

                    b.HasIndex("budget_id");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            expenses_id = 1,
                            budget_id = 1,
                            category = "Food&Drinks",
                            cost = 1.0,
                            description = "My Singapore Expenses"
                        },
                        new
                        {
                            expenses_id = 2,
                            budget_id = 2,
                            category = "Food&Drinks",
                            cost = 23.489999999999998,
                            description = "nasi lemak"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Itinerary", b =>
                {
                    b.Property<int>("itinerary_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("is_premade")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("itinerary_id");

                    b.HasIndex("account_id");

                    b.ToTable("Itineraries");

                    b.HasData(
                        new
                        {
                            itinerary_id = 1,
                            account_id = 1,
                            created_date = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Going to Marina Bay Sands",
                            is_premade = false,
                            name = "SG Downtown"
                        },
                        new
                        {
                            itinerary_id = 2,
                            account_id = 2,
                            created_date = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Theme park",
                            is_premade = false,
                            name = "Haw Par Villa"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.ItineraryItem", b =>
                {
                    b.Property<int>("itinerary_item_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("foodleisure_id")
                        .HasColumnType("integer");

                    b.Property<int>("itinerary_id")
                        .HasColumnType("integer");

                    b.Property<int>("sequence")
                        .HasColumnType("integer");

                    b.HasKey("itinerary_item_id");

                    b.HasIndex("foodleisure_id");

                    b.HasIndex("itinerary_id");

                    b.ToTable("ItineraryItems");

                    b.HasData(
                        new
                        {
                            itinerary_item_id = 1,
                            foodleisure_id = 1,
                            itinerary_id = 1,
                            sequence = 101
                        },
                        new
                        {
                            itinerary_item_id = 2,
                            foodleisure_id = 2,
                            itinerary_id = 2,
                            sequence = 12345
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.FoodDelivery", b =>
                {
                    b.Property<int>("food_order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<string>("instruction")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("room_no")
                        .HasColumnType("integer");

                    b.HasKey("food_order_id");

                    b.HasIndex("account_id");

                    b.ToTable("FoodDeliveries");

                    b.HasData(
                        new
                        {
                            food_order_id = 1,
                            account_id = 1,
                            instruction = "leave food outside the door",
                            room_no = 20
                        },
                        new
                        {
                            food_order_id = 2,
                            account_id = 2,
                            instruction = "call before coming",
                            room_no = 19
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.Navigation", b =>
                {
                    b.Property<int>("navigation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("distance")
                        .HasColumnType("integer");

                    b.Property<int>("duration")
                        .HasColumnType("integer");

                    b.Property<double>("end_lat")
                        .HasColumnType("double precision");

                    b.Property<double>("end_lon")
                        .HasColumnType("double precision");

                    b.Property<int>("foodleisure_id")
                        .HasColumnType("integer");

                    b.Property<double>("start_lat")
                        .HasColumnType("double precision");

                    b.Property<double>("start_lon")
                        .HasColumnType("double precision");

                    b.Property<NavigationType>("type")
                        .HasColumnType("navigation_type");

                    b.HasKey("navigation_id");

                    b.HasIndex("foodleisure_id");

                    b.ToTable("Navigations");

                    b.HasData(
                        new
                        {
                            navigation_id = 1,
                            distance = 5,
                            duration = 3,
                            end_lat = 1.3400000000000001,
                            end_lon = -43.299999999999997,
                            foodleisure_id = 1,
                            start_lat = 23.219999999999999,
                            start_lon = 24.449999999999999,
                            type = NavigationType.Car
                        },
                        new
                        {
                            navigation_id = 2,
                            distance = 9,
                            duration = 4,
                            end_lat = 76.109999999999999,
                            end_lon = 32.329999999999998,
                            foodleisure_id = 2,
                            start_lat = -65.299999999999997,
                            start_lon = 23.440000000000001,
                            type = NavigationType.Bus
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.Review", b =>
                {
                    b.Property<int>("review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("foodleisure_id")
                        .HasColumnType("integer");

                    b.Property<Rating>("rating")
                        .HasColumnType("rating");

                    b.HasKey("review_id");

                    b.HasIndex("account_id");

                    b.HasIndex("foodleisure_id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            review_id = 1,
                            account_id = 1,
                            description = "saizeriya sucks",
                            foodleisure_id = 1,
                            rating = Rating.One
                        },
                        new
                        {
                            review_id = 2,
                            account_id = 2,
                            description = "mcdonalds is awesome!",
                            foodleisure_id = 2,
                            rating = Rating.Five
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.TransportFares", b =>
                {
                    b.Property<int>("fare_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("fare_name")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("fares")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("transport_id")
                        .HasColumnType("integer");

                    b.Property<TaxiType>("type")
                        .HasColumnType("taxi_type");

                    b.HasKey("fare_id");

                    b.HasIndex("transport_id");

                    b.ToTable("TransportFares");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.Transportation", b =>
                {
                    b.Property<int>("transport_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<string>("company_name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("contact_num")
                        .HasMaxLength(8)
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("website")
                        .HasColumnType("varchar(500)");

                    b.HasKey("transport_id");

                    b.HasIndex("account_id");

                    b.ToTable("Transportations");

                    b.HasData(
                        new
                        {
                            transport_id = 1,
                            account_id = 1,
                            company_name = "GrabCar",
                            contact_num = 99119911,
                            description = "for rich people only",
                            website = "www.grab.com"
                        },
                        new
                        {
                            transport_id = 2,
                            account_id = 2,
                            company_name = "Gojek",
                            contact_num = 92206874,
                            description = "for peasant people only",
                            website = "www.gojek.com"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Requests.GuestRequest", b =>
                {
                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<int>("request_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("serviced_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("serviced_by")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("account_id", "request_id");

                    b.HasIndex("request_id");

                    b.HasIndex("serviced_by");

                    b.ToTable("GuestRequests");

                    b.HasData(
                        new
                        {
                            account_id = 1,
                            request_id = 1,
                            created_at = new DateTime(2022, 2, 14, 11, 32, 49, 37, DateTimeKind.Local).AddTicks(9790),
                            deleted_at = new DateTime(2022, 2, 14, 11, 32, 49, 38, DateTimeKind.Local).AddTicks(600),
                            is_deleted = false,
                            serviced_at = new DateTime(2022, 2, 14, 11, 32, 49, 38, DateTimeKind.Local).AddTicks(1380),
                            serviced_by = 1,
                            status = "In progress"
                        },
                        new
                        {
                            account_id = 2,
                            request_id = 2,
                            created_at = new DateTime(2022, 2, 14, 11, 32, 49, 38, DateTimeKind.Local).AddTicks(2690),
                            deleted_at = new DateTime(2022, 2, 14, 11, 32, 49, 38, DateTimeKind.Local).AddTicks(2780),
                            is_deleted = false,
                            serviced_at = new DateTime(2022, 2, 14, 11, 32, 49, 38, DateTimeKind.Local).AddTicks(2870),
                            serviced_by = 2,
                            status = "In progress"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Requests.Request", b =>
                {
                    b.Property<int>("request_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("request_msg")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("requesttype_id")
                        .HasColumnType("integer");

                    b.HasKey("request_id");

                    b.HasIndex("requesttype_id");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            request_id = 1,
                            request_msg = "2 towels",
                            requesttype_id = 1
                        },
                        new
                        {
                            request_id = 2,
                            request_msg = "2 Toilet Paper",
                            requesttype_id = 2
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Requests.RequestType", b =>
                {
                    b.Property<int>("requesttype_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("type_value")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("requesttype_id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            requesttype_id = 1,
                            created_at = new DateTime(2022, 2, 14, 11, 32, 49, 39, DateTimeKind.Local).AddTicks(1380),
                            deleted_at = new DateTime(2022, 2, 14, 11, 32, 49, 39, DateTimeKind.Local).AddTicks(2160),
                            is_deleted = false,
                            type_value = "RoomService"
                        },
                        new
                        {
                            requesttype_id = 2,
                            created_at = new DateTime(2022, 2, 14, 11, 32, 49, 39, DateTimeKind.Local).AddTicks(3550),
                            deleted_at = new DateTime(2022, 2, 14, 11, 32, 49, 39, DateTimeKind.Local).AddTicks(3650),
                            is_deleted = false,
                            type_value = "Bathroom replenishment"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.RoomDetails.Reservation", b =>
                {
                    b.Property<int>("reservation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("room_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("reservation_id");

                    b.HasIndex("account_id");

                    b.HasIndex("room_id");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            reservation_id = 1,
                            account_id = 1,
                            end_date = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            room_id = 1,
                            start_date = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            reservation_id = 2,
                            account_id = 2,
                            end_date = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            room_id = 2,
                            start_date = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.RoomDetails.Room", b =>
                {
                    b.Property<int>("room_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("roomType_id")
                        .HasColumnType("integer");

                    b.Property<string>("room_num")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("vacancy")
                        .HasColumnType("boolean");

                    b.HasKey("room_id");

                    b.HasIndex("roomType_id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            room_id = 1,
                            roomType_id = 1,
                            room_num = "1",
                            vacancy = true
                        },
                        new
                        {
                            room_id = 2,
                            roomType_id = 2,
                            room_num = "1",
                            vacancy = true
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.RoomDetails.RoomType", b =>
                {
                    b.Property<int>("roomtype_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(800)");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<string>("room_type")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("roomtype_id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            roomtype_id = 1,
                            description = "The Presidential Suite offers a tranquil haven of comfort and luxury surrounded by sophisticated d'ecor designed to delight all tastes. Featuring a fully-equipped kitchen, bedroom, large living room - including a working and dining area - and guest restroom, the Presidential Suite is the ultimate in creating a feeling of home",
                            price = 10000m,
                            room_type = "Presidential Suite"
                        },
                        new
                        {
                            roomtype_id = 2,
                            description = "The Business Suite offers a tranquil haven of comfort and luxury surrounded by sophisticated d'ecor designed to delight all tastes. Featuring a fully-equipped kitchen, bedroom, large living room - including a working and dining area - and guest restroom, the Business Suite is the ultimate in creating a feeling of home",
                            price = 5000m,
                            room_type = "Business Suite"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.UserDetails.Account", b =>
                {
                    b.Property<int>("account_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("access_key")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("currency")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("distance_from_hotel")
                        .HasColumnType("numeric");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("facility_id")
                        .HasColumnType("integer");

                    b.Property<int>("feedback_id")
                        .HasColumnType("integer");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("guest_type")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("has_reservation")
                        .HasColumnType("boolean");

                    b.Property<string>("location")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("phone_number")
                        .HasColumnType("integer");

                    b.Property<bool>("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("position")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("request_id")
                        .HasColumnType("integer");

                    b.Property<int>("reservation_id")
                        .HasColumnType("integer");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.Property<string>("secret_hashpin")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("account_id");

                    b.HasIndex("facility_id");

                    b.HasIndex("request_id");

                    b.HasIndex("role_id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            account_id = 1,
                            currency = "sgd",
                            distance_from_hotel = 0m,
                            email = "john_doe@gmail.com",
                            email_confirmed = true,
                            facility_id = 1,
                            feedback_id = 1,
                            full_name = "John Doe",
                            has_reservation = true,
                            location = "Singapore",
                            password_hash = "123",
                            phone_number = 12345678,
                            phone_number_confirmed = true,
                            position = "guest",
                            request_id = 1,
                            reservation_id = 1,
                            role_id = 1,
                            secret_hashpin = "not so secret",
                            two_factor_enabled = true,
                            username = "John Doe"
                        },
                        new
                        {
                            account_id = 2,
                            currency = "sgd",
                            distance_from_hotel = 0m,
                            email = "sarah_ellis@gmail.com",
                            email_confirmed = true,
                            facility_id = 2,
                            feedback_id = 2,
                            full_name = "Sarah Ellis",
                            has_reservation = true,
                            location = "Singapore",
                            password_hash = "123",
                            phone_number = 98765432,
                            phone_number_confirmed = true,
                            position = "guest",
                            request_id = 2,
                            reservation_id = 1,
                            role_id = 2,
                            secret_hashpin = "very so secret",
                            two_factor_enabled = true,
                            username = "sarahellis"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.UserDetails.UserRole", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("role_id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            role_id = 1,
                            role = "Hotel Staff"
                        },
                        new
                        {
                            role_id = 2,
                            role = "Hotel Guest"
                        });
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Facilities.FacilityBooking", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.Facilities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("facility_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Facilities.Feedback", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.HotelServices.HotelService", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Inventories.Inventory", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.Inventories.InventoryCategory", "InventoryCategory")
                        .WithMany()
                        .HasForeignKey("invcate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryCategory");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Inventories.InventoryRequest", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.Inventories.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("inventory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Blog", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.FoodLeisureServices.FoodLeisure", "FoodLeisure")
                        .WithMany()
                        .HasForeignKey("foodleisure_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.Itineraries.Itinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("itinerary_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FoodLeisure");

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Budget", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.Itineraries.Itinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("itinerary_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Checklist", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.Itineraries.Itinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("itinerary_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Expenses", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.Itineraries.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("budget_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.Itinerary", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Itineraries.ItineraryItem", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.FoodLeisureServices.FoodLeisure", "FoodLeisure")
                        .WithMany()
                        .HasForeignKey("foodleisure_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.Itineraries.Itinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("itinerary_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodLeisure");

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.FoodDelivery", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.Navigation", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.FoodLeisureServices.FoodLeisure", "FoodLeisure")
                        .WithMany()
                        .HasForeignKey("foodleisure_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodLeisure");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.Review", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.FoodLeisureServices.FoodLeisure", "FoodLeisure")
                        .WithMany()
                        .HasForeignKey("foodleisure_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FoodLeisure");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.TransportFares", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.OtherServices.Transportation", "Transportation")
                        .WithMany()
                        .HasForeignKey("transport_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transportation");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.OtherServices.Transportation", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Requests.GuestRequest", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.Requests.Request", "Request")
                        .WithMany()
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "ServicedBy")
                        .WithMany()
                        .HasForeignKey("serviced_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Request");

                    b.Navigation("ServicedBy");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.Requests.Request", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.Requests.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("requesttype_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.RoomDetails.Reservation", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.RoomDetails.Room", "Room")
                        .WithMany()
                        .HasForeignKey("room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.RoomDetails.Room", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.RoomDetails.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("roomType_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("personalised_concierge_m1.Models.Entities.UserDetails.Account", b =>
                {
                    b.HasOne("personalised_concierge_m1.Models.Entities.Facilities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("facility_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.Requests.Request", "Request")
                        .WithMany()
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personalised_concierge_m1.Models.Entities.UserDetails.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Request");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
